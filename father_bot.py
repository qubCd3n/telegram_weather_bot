import logging
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    JobQueue,
)
from datetime import time
import pytz
from config import TELEGRAM_BOT_TOKEN, WEATHER_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ß–∞—Ç ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –µ–≥–æ @username
CHANNEL_CHAT_ID = '@Avramen.pub'  # –ò–ª–∏ '-1001234567890'

def get_weather(city):
    url = f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}&lang=ru"
    
    try:
        response = requests.get(url)
        data = response.json()
        
        if 'current' in data:
            temp = data['current']['temp_c']
            condition = data['current']['condition']['text']
            wind = data['current']['wind_kph']
            humidity = data['current']['humidity']
            
            return (f"üå§ –ü–æ–≥–æ–¥–∞ –≤ *{city.capitalize()}*:\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *{temp}¬∞C*\n"
                    f"–£—Å–ª–æ–≤–∏—è: *{condition}*\n"
                    f"–í–µ—Ç–µ—Ä: *{wind} –∫–º/—á*\n"
                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: *{humidity}%*")
        else:
            return "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    
    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /weather –ö–∞–ª—É–≥–∞"
    )

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        city = ' '.join(context.args)
        weather_info = get_weather(city)
        await update.message.reply_text(weather_info, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: /weather –ö–∞–ª—É–≥–∞")

async def send_daily_weather(context: ContextTypes.DEFAULT_TYPE):
    try:
        city = "–ö–∞–ª—É–≥–∞"
        weather_info = get_weather(city)
        await context.bot.send_message(chat_id=CHANNEL_CHAT_ID, text=weather_info, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø–æ–≥–æ–¥—ã: {e}")

def main():
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("weather", weather_command))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    job_queue = application.job_queue

    # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow'
    timezone = pytz.timezone('Europe/Moscow')

    # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: 9:00 —É—Ç—Ä–∞
    job_queue.run_daily(
        send_daily_weather,
        time=time(hour=10, minute=19, second=0, tzinfo=timezone),
        name="daily_weather",
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()